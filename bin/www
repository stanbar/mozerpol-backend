#!/usr/bin/env node

/**
 * Module dependencies.
 */

var sqlite3 = require('sqlite3').verbose()
var db = new sqlite3.Database('./mozerpol.db')
db.run("CREATE TABLE IF NOT EXISTS Post (content TEXT)");

var app = require('../app');
var debug = require('debug')('mozerpol-server:server');
var https = require('https');

const fs = require('fs');
require('dotenv').config();
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9999');
app.set('port', port);

/**
 * Create HTTPS server.
 */
let httpsError = false;
if (!process.env.STASBAR_SSL_KEY) {
  console.warn("Didn't start https server because of absence of STASBAR_SSL_KEY");
  httpsError = true;
}
if (!process.env.STASBAR_SSL_CERT) {
  console.warn("Didn't start https server because of absence of STASBAR_SSL_CERT");
  httpsError = true;
}
if (!httpsError) {
  const sslOptions = {
    key: fs.readFileSync(process.env.STASBAR_SSL_KEY),
    cert: fs.readFileSync(process.env.STASBAR_SSL_CERT),
    ca: process.env.STASBAR_SSL_CA ? fs.readFileSync(process.env.STASBAR_SSL_CA) : undefined,
  };

  const httpsPort = parseInt(process.env.PORT_HTTPS || '9999', 10);
  var server = https.createServer(sslOptions, app);

  server.listen(httpsPort);
  server.on('error', onError);
  server.on('listening', onListening);
} else {
  console.error('Could not create server');
}

db.close();
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
